<p>##kaki# Types_are_3rd_headings
Types are exists only to restrict what methods can return.
You are not restricted to use types, but it helps coallo to find bugs,
and types are helpful additional information on the result graph. 
(Appears on edges.)</p>
<p>Every md element considered as comments, except **2nd and 3rd headers, unordered lists(including asterisk and hyphen), links. **</p>
<h3>String</h3>
<p>Now a String type is exists!</p>
<h3>Number</h3>
<p>Numbers are great, but what if you want more specific?</p>
<h3>Int extens Number</h3>
<p>The hairy old guys calls this inheritance.
The only effect is that a method which expect a Number, will be fine with Int, but not backwards.</p>
<p>cicles are the main building blocks:</p>
<h2>Circles_are_2nd_headers</h2>
<ul>
<li>method1</li>
<li>method2</li>
</ul>
<p>Basically a list of methods executed one after another.
You should consider them as steps.</p>
<h2>Header2_without_list_items_is_more_like_a_method</h2>
<p>One list item can looks like this:</p>
<pre><code> - method_name
</code></pre>
<p>You can specify return type:</p>
<pre><code> - method_name:String
</code></pre>
<p>or type<strong>s</strong>:</p>
<pre><code> - method_name:String,Int
</code></pre>
<p>Input parameter type/types, if you sure about this level of detail:</p>
<pre><code> - Int,String:method_name
</code></pre>
<p>If you specify the input types, than you should specify every other return type in the circle as well:</p>
<h2>Very_detailed_circle</h2>
<ul>
<li>some_method_returns_something:Int</li>
<li>nothing_here</li>
<li>Int:Some_method_waiting_for_integer</li>
</ul>
<p>In this case, coallo will see that <strong>some_method_returns_something</strong> have a return type, 
and <strong>some_method_waiting_for_integer</strong> waits for Int, so it's FINE, BUT:</p>
<h2>Missing_details_raising_warning</h2>
<ul>
<li>some_method_returns_nothing</li>
<li>also_nothing_here</li>
<li>Int:Some_method_waiting_for_integer</li>
</ul>
<p>In this case, coallo will raise warning, &quot;Missing return value in circle&quot;</p>
<h2>Missing_details_raises_warning</h2>
<ul>
<li>some_method_returns_nothing</li>
<li>also_nothing_here</li>
<li>Int:Some_method_waiting_for_integer</li>
<li>returns_int_but_too_late:Int</li>
</ul>
<p>This also raises warning, order of methods matters!</p>
<p>You can also describe your methods/steps:</p>
<pre><code> - Int:method_name:String This description considered as comment.
</code></pre>
<h2>Int,String:predefined_method</h2>
<p>In case you predefine your method(which is the recommended way)
Than you can't change your mind:</p>
<h2>Circle_with_wrong_method</h2>
<ul>
<li>returns_integer</li>
<li>returns_integer</li>
<li>Int,Int:predefined_method this raises warning, since we defined it with Int,String separately</li>
</ul>
<h2>Circle_with_void</h2>
<ul>
<li>some_locally_defined_method:String</li>
<li>the_last_method:void the void means that nothing returns</li>
</ul>
<p><strong>Sub-lists</strong> are forbidden! But you can embedd lists:</p>
<h2>Circle_with_embedded_circle</h2>
<ul>
<li>some_casual_method</li>
<li>Circle_with_void</li>
</ul>
<p>Circle and method names are identical in term of syntax:</p>
<h2>Return_typed_circle : Int</h2>
<ul>
<li>step</li>
<li>this_step_gives_the_return_values:Int without it, coallo raises warning &quot;Missing return type Int&quot;</li>
<li>another_step</li>
</ul>
